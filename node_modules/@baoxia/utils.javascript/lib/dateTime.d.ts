import { DateTimeField } from "./constant/dateTimeField.js";
import { DateTimeSpan } from "./model/dateTimeSpan.js";
export declare class DateTime {
    static WeekdayCaptions: string[];
    protected _date: Date;
    get timeZone(): number;
    get timeZoneMinutes(): number;
    get year(): number;
    set year(year: number);
    get month(): number;
    set month(month: number);
    get day(): number;
    set day(day: number);
    get weekday(): number;
    get hour(): number;
    set hour(hour: number);
    get minute(): number;
    set minute(minute: number);
    get second(): number;
    set second(second: number);
    get millisecond(): number;
    set millisecond(millisecond: number);
    get millsecondsFrom1970(): number;
    set millsecondsFrom1970(millsecondsFrom1970: number);
    /**
     * 此时此刻的时间对象。
     */
    static get now(): DateTime;
    /**
     * 根据指定的比较精度，比较两个时间对象的“早晚”，当“dateTimeA”早于“dateTimeB”时返回“-1”；当“dateTimeA”晚于“dateTimeB”时返回“1”；当“dateTimeA”等于“dateTimeB”时返回“0”。
     * @param dateTimeA 要进行比较的时间对象A。
     * @param dateTimeB 要进行比较的时间对象B。
     * @param [compareAccuracy] 指定的时间比较精度，类型为“DateTimeField”。
     * @returns 当“dateTimeA”早于“dateTimeB”时返回“-1”；当“dateTimeA”晚于“dateTimeB”时返回“1”；当“dateTimeA”等于“dateTimeB”时返回“0”。
     */
    static compareDateTimes(dateTimeA: DateTime | null, dateTimeB: DateTime | null, compareAccuracy?: DateTimeField): number;
    /**
     * 根据指定的比较精度，比较两个时间对象是否相等。
     * @param dateTimeA 要进行比较的时间对象A。
     * @param dateTimeB 要进行比较的时间对象B。
     * @param [compareAccuracy] 指定的时间比较精度，类型为“DateTimeField”。
     * @returns 当“dateTimeA”等于“dateTimeB”时返回“true”，否则返回“false”。
     */
    static equalsDateTimes(dateTimeA: DateTime | null, dateTimeB: DateTime | null, compareAccuracy?: DateTimeField): boolean;
    constructor(date?: DateTime | Date | number | string | null);
    /**
     * 在当前时间对象上增加指定的年数，返回增加后的时间对象（当前对象）。
     * @param years 要增加的年数。
     * @returns 返回已增加指定年数后的时间对象（当前对象）。
     */
    addYears(years: number): DateTime;
    /**
     * 在当前时间对象上增加指定的月数，返回增加后的时间对象（当前对象）。
     * @param years 要增加的月数。
     * @returns 返回已增加指定月数后的时间对象（当前对象）。
     */
    addMonths(months: number): DateTime;
    /**
     * 在当前时间对象上增加指定的天数，返回增加后的时间对象（当前对象）。
     * @param years 要增加的天数。
     * @returns 返回已增加指定天数后的时间对象（当前对象）。
     */
    addDays(days: number): DateTime;
    /**
     * 在当前时间对象上增加指定的小时数，返回增加后的时间对象（当前对象）。
     * @param years 要增加的小时数。
     * @returns 返回已增加指定小时数后的时间对象（当前对象）。
     */
    addHours(hours: number): DateTime;
    /**
     * 在当前时间对象上增加指定的分钟数，返回增加后的时间对象（当前对象）。
     * @param years 要增加的分钟数。
     * @returns 返回已增加指定分钟数后的时间对象（当前对象）。
     */
    addMinutes(minutes: number): DateTime;
    /**
     * 在当前时间对象上增加指定的秒数，返回增加后的时间对象（当前对象）。
     * @param years 要增加的秒数。
     * @returns 返回已增加指定秒数后的时间对象（当前对象）。
     */
    addSeconds(seconds: number): DateTime;
    /**
     * 在当前时间对象上增加指定的毫秒数，返回增加后的时间对象（当前对象）。
     * @param years 要增加的毫秒数。
     * @returns 返回已增加指定毫秒数后的时间对象（当前对象）。
     */
    addMilliseconds(milliseconds: number): DateTime;
    /**
     * 获取当前时间对象减去指定时间对象后的时间间隔对象。
     * @param anotherDateTime 指定的另一个时间对象。
     * @returns 当前时间对象减去指定时间对象后的时间间隔对象。
     */
    timeSpanBySubtract(anotherDateTime: DateTime | null): DateTimeSpan;
    /**
     * 根据指定的比较精度，比较两个时间对象的“早晚”，当前时间对象早于“anotherDateTime”时返回“-1”；当前时间对象晚于“anotherDateTime”时返回“1”；当前时间对象等于“anotherDateTime”时返回“0”。
     * @param anotherDateTime 要进行比较的时间对象。
     * @param [compareAccuracy] 指定的时间比较精度，类型为“DateTimeField”。
     * @returns 当前时间对象早于“anotherDateTime”时返回“-1”；当前时间对象晚于“anotherDateTime”时返回“1”；当前时间对象等于“anotherDateTime”时返回“0”。
     */
    compareTo(anotherDateTime: DateTime | null, compareAccuracy?: DateTimeField): number;
    /**
     * 根据指定的比较精度，比较两个时间对象的“早晚”，当前时间对象早于“anotherDateTime”时返回“true”，否则返回“false”。
     * @param anotherDateTime 要进行比较的时间对象。
     * @param [compareAccuracy] 指定的时间比较精度，类型为“DateTimeField”。
     * @returns 当前时间早于“anotherDateTime”时返回“true”，否则返回“false”。
     */
    isLessThan(anotherDateTime: DateTime | null, compareAccuracy?: DateTimeField): boolean;
    /**
     * 根据指定的比较精度，比较两个时间对象的“早晚”，当前时间对象早于或等于“anotherDateTime”时返回“true”，否则返回“false”。
     * @param anotherDateTime 要进行比较的时间对象。
     * @param [compareAccuracy] 指定的时间比较精度，类型为“DateTimeField”。
     * @returns 当前时间早于或等于“anotherDateTime”时返回“true”，否则返回“false”。
     */
    isLessThanOrEquals(anotherDateTime: DateTime | null, compareAccuracy?: DateTimeField): boolean;
    /**
     * 根据指定的比较精度，比较两个时间对象是否相等。
     * @param anotherDateTime 要进行比较的时间对象。
     * @param [compareAccuracy] 指定的时间比较精度，类型为“DateTimeField”。
     * @returns 当前时间等于“anotherDateTime”时返回“true”，否则返回“false”。
     */
    isEquals(anotherDateTime: DateTime | null, compareAccuracy?: DateTimeField): boolean;
    /**
     * 根据指定的比较精度，比较两个时间对象是否不相等。
     * @param anotherDateTime 要进行比较的时间对象。
     * @param [compareAccuracy] 指定的时间比较精度，类型为“DateTimeField”。
     * @returns 当前时间不等于“anotherDateTime”时返回“true”，否则返回“false”。
     */
    isNotEquals(anotherDateTime: DateTime | null, compareAccuracy?: DateTimeField): boolean;
    /**
     * 根据指定的比较精度，比较两个时间对象的“早晚”，当前时间对象晚于或等于“anotherDateTime”时返回“true”，否则返回“false”。
     * @param anotherDateTime 要进行比较的时间对象。
     * @param [compareAccuracy] 指定的时间比较精度，类型为“DateTimeField”。
     * @returns 当前时间晚于“anotherDateTime”时返回“true”，否则返回“false”。
     */
    isGreaterThan(anotherDateTime: DateTime | null, compareAccuracy?: DateTimeField): boolean;
    /**
     * 根据指定的比较精度，比较两个时间对象的“早晚”，当前时间对象晚于或等于“anotherDateTime”时返回“true”，否则返回“false”。
     * @param anotherDateTime 要进行比较的时间对象。
     * @param [compareAccuracy] 指定的时间比较精度，类型为“DateTimeField”。
     * @returns 当前时间晚于或等于“anotherDateTime”时返回“true”，否则返回“false”。
     */
    isGreaterThanOrEquals(anotherDateTime: DateTime | null, compareAccuracy?: DateTimeField): boolean;
    /**
     * 在当前时间对象的基础上，通过指定的时间偏移量，创建并返回一个新的时间对象。
     * @param dateTimeField 指定的时间偏移量，类型为“DateTimeField”。
     * @param offset 指定的时间偏移量。
     * @returns 偏移指定时间后的，新的时间对象。
     */
    dateTimeByOffset(dateTimeField: DateTimeField, offset: number): DateTime;
    /**
     * 通过增加指定的年份数，创建并返回一个新的时间对象。
     * @param years 指定的年份数。
     * @returns 增加指定的年份数后的，新的时间对象。
     */
    dateTimeByAddYears(years: number): DateTime;
    /**
     * 通过增加指定的月份数，创建并返回一个新的时间对象。
     * @param months 指定的月份数。
     * @returns 增加指定的月份数后的，新的时间对象。
     */
    dateTimeByAddMonths(months: number): DateTime;
    /**
     * 通过增加指定的天数，创建并返回一个新的时间对象。
     * @param days 指定的天数。
     * @returns 增加指定的天数后的，新的时间对象。
     */
    dateTimeByAddDays(days: number): DateTime;
    /**
     * 通过增加指定的小时数，创建并返回一个新的时间对象。
     * @param hours 指定的小时数。
     * @returns 增加指定的小时数后的，新的时间对象。
     */
    dateTimeByAddHours(hours: number): DateTime;
    /**
     * 通过增加指定的分钟数，创建并返回一个新的时间对象。
     * @param minutes 指定的分钟数。
     * @returns 增加指定的分钟数后的，新的时间对象。
     */
    dateTimeByAddMinutes(minutes: number): DateTime;
    /**
     * 通过增加指定的秒数，创建并返回一个新的时间对象。
     * @param seconds 指定的秒数。
     * @returns 增加指定的秒数后的，新的时间对象。
     */
    dateTimeByAddSeconds(seconds: number): DateTime;
    /**
     * 通过增加指定的毫秒数，创建并返回一个新的时间对象。
     * @param milliseconds 指定的毫秒数。
     * @returns 增加指定的毫秒数后的，新的时间对象。
     */
    dateTimeByAddMilliseconds(milliseconds: number): DateTime;
    /**
     * 获取当前日期时间，“0点0分0秒0毫秒”的日期时间对象。
     * @returns 返回当前日期时间，“0点0分0秒0毫秒”的日期时间对象。
     */
    dateTimeAtBeginOfDay(): DateTime;
    /**
     * 获取当前日期时间，“明日，0点0分0秒0毫秒”的日期时间对象。
     * @returns 返回当前日期时间，“明日，0点0分0秒0毫秒”的日期时间对象。
     */
    dateTimeAtEndOfDay(): DateTime;
    /**
     * 获取当前日期时间，“周日，0点0分0秒0毫秒”的日期时间对象。
     * @returns 返回当前日期时间，“周日，0点0分0秒0毫秒”的日期时间对象。
     */
    dateTimeAtBeginOfWeek(): DateTime;
    /**
     * 获取当前日期时间，“下周日，0点0分0秒0毫秒”的日期时间对象。
     * @returns 返回当前日期时间，“周日，0点0分0秒0毫秒”的日期时间对象。
     */
    dateTimeAtEndOfWeek(): DateTime;
    /**
     * 获取当前日期时间，“当月1日，0点0分0秒0毫秒”的日期时间对象。
     * @returns 返回当前日期时间，“当月1日，0点0分0秒0毫秒”的日期时间对象。
     */
    dateTimeAtBeginOfMonth(): DateTime;
    /**
     * 获取当前日期时间，“下月1日，0点0分0秒0毫秒”的日期时间对象。
     * @returns 返回当前日期时间，“下月1日，0点0分0秒0毫秒”的日期时间对象。
     */
    dateTimeAtEndOfMonth(): DateTime;
    /**
     * 获取当前日期时间，“当季1日，0点0分0秒0毫秒”的日期时间对象。
     * @returns 返回当前日期时间，“当季1日，0点0分0秒0毫秒”的日期时间对象。
     */
    dateTimeAtBeginOfQuarter(): DateTime;
    /**
     * 获取当前日期时间，“下季1日，0点0分0秒0毫秒”的日期时间对象。
     * @returns 返回当前日期时间，“下季1日，0点0分0秒0毫秒”的日期时间对象。
     */
    dateTimeAtEndOfQuarter(): DateTime;
    /**
     * 获取当前日期时间，“当年1月1日，0点0分0秒0毫秒”的日期时间对象。
     * @returns 返回当前日期时间，“当年1月1日，0点0分0秒0毫秒”的日期时间对象。
     */
    dateTimeAtBeginOfYear(): DateTime;
    /**
     * 获取当前日期时间，“下一年1月1日，0点0分0秒0毫秒”的日期时间对象。
     * @returns 返回当前日期时间，“下一年1月1日，0点0分0秒0毫秒”的日期时间对象。
     */
    dateTimeAtEndOfYear(): DateTime;
    /**
     * 在字符串格式化模板中替换日期格式化占位符为指定的日期字段名称。
     * @param stringFormatter 字符串格式化模板。
     * @param formatterPlaceholder 日期格式化占位符。
     * @param dateFieldCaption 日期字段标题。
     * @param isRemoveLeftCharsByPlaceholder 是否依据日期格式化占位符移除时间字段左边的字符，默认为：false。
     * @returns 使用给定的模板和日期字段标题替换后的日期字符串。
     */
    protected replaceDateFormatterPlaceholderInFormatter(stringFormatter: string | null, formatterPlaceholder: string | null, dateFieldCaption: string | null, isRemoveLeftCharsByPlaceholder?: boolean): string | null;
    /**
     * 根据指定的格式化模板，将当前时间对象，转为指定模板结构的字符串，字符串模板的可选参数有：
     * y，年；M，月；d，日；w，周日期；H，24小时格式的小时；m，分钟；s，秒钟；f，毫秒。
     * @param stringFormatter 指定的格式化模板。
     * @returns 指定模板结构的当前时间对象字符串。
     */
    toString(stringFormatter: string | null): string;
    /**
     * 将当前时间对象，转为 ISO 格式的字符串。
     * @param isUseLocalTimeZone 是否使用本地时区，默认为：true，。
     * @returns ISO 格式的当前时间对象字符串。
     */
    toISOString(isUseLocalTimeZone?: boolean): string;
    /**
     * 将当前时间对象，转为 JSON 格式的字符串。
     * @returns 当前当前时间对象，对应的 JSON 格式的字符串。
     */
    toJSON(): string | null;
}
//# sourceMappingURL=dateTime.d.ts.map