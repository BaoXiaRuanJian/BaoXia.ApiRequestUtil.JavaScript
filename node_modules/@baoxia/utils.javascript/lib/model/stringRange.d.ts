/**
 * 字符串的区域信息。
 */
export declare class StringRange {
    /**
     * 开始的字符索引值。
     */
    beginCharIndex: number;
    /**
     * 结束的字符索引值。
     */
    get endCharIndex(): number;
    /**
     * 结束的字符索引值。
     */
    set endCharIndex(endCharIndex: number);
    /**
     * 字符区域的长度。
     */
    charsCount: number;
    /**
     * 尝试使用连续字符串索引值的规则，压缩指定的区域数组。
     * @param ranges 要进行压缩的区域数组。
     * @returns 使用连续字符串索引值的规则，压缩后的区域数组。
     */
    static tryCompressionRangesWithConsecutiveCharIndex(ranges: StringRange[]): StringRange[];
    constructor(beginCharIndex?: number, charsCount?: number);
    /**
     * 尝试将另一个区域加入到当前区域中，如果另一个区域的起始字符索引值刚好等于当前区域的结束字符索引值，则加入成功，当前区域的字符个数增加另一个区域的字符个数。
     * @param anotherRange 要尝试加入的另一个字符串区域。
     * @returns 如果另一个区域的起始字符索引值刚好等于当前区域的结束字符索引值，则加入成功，返回：true，当前区域的字符个数增加另一个区域的字符个数，否则返回：false。
     */
    tryAppendRangeWithConsecutiveCharIndex(anotherRange: StringRange): boolean;
}
//# sourceMappingURL=stringRange.d.ts.map