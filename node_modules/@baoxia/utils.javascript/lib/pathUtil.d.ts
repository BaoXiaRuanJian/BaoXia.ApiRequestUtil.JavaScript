export declare class PathUtil {
    /**
     * 将当前字符串转为以当前系统的文件路径分隔符结尾的文件夹路径字符串。
     * @param fileDirectoryPath 要进行转换的文件夹路径字符串。
     * @returns 转换后的以当前系统的文件路径分隔符结尾的文件夹路径字符串。
     */
    static toDirectoryPathFromFilePath(fileDirectoryPath: string | null): string;
    /**
     * 从指定的文件路径中，获取文件名。
     * @param filePath 指定的文件路径。
     * @param [isIncludeFileExtensionName] 是否包含扩展名，默认为：true 。
     * @param [isLastFileExtensionName] 是否获取最后一个扩展名作为扩展名，默认为：true 。
     * @returns 从指定的文件路径中，获取的文件名。
     */
    static getFileNameFromFilePath(filePath: string | null, isIncludeFileExtensionName?: boolean, isLastFileExtensionName?: boolean): string;
    /**
     * 从指定的文件路径中，获取文件扩展名。
     * @param filePath 指定的文件路径。
     * @param [isGetLastFileExtensionName] 是否获取最后一个扩展名，默认为：true 。
     * @returns 从指定的文件路径中，获取的文件扩展名。
     */
    static getFileExtensionNameFromFilePath(filePath: string | null, isGetLastFileExtensionName?: boolean): string;
    /**
     * 将当前字符串转为以 URI 路径分隔符结尾的文件夹路径字符串。
     * @param uriDirectoryPath 要进行转换的 URI 路径字符串。
     * @returns 转换后的以 URI 路径分隔符结尾的文件夹路径字符串。
     */
    static toDirectoryPathFromUriPath(uriDirectoryPath: string | null): string;
    /**
     * 从指定的Uri路径中，获取文件名。
     * @param uriPath 指定的Uri路径。
     * @param [isIncludeFileExtensionName] 是否包含扩展名，默认为：true 。
     * @param [isLastFileExtensionName] 是否获取最后一个扩展名作为扩展名，默认为：true 。
     * @returns 从指定的Uri路径中，获取的文件名。
     */
    static getFileNameFromUriPath(uriPath: string | null, isIncludeFileExtensionName?: boolean, isLastFileExtensionName?: boolean): string;
    /**
     * 从指定的Uri路径中，获取文件扩展名。
     * @param uriPath 指定的Uri路径。
     * @param [isGetLastFileExtensionName] 是否获取最后一个扩展名，默认为：true 。
     * @returns 从指定的Uri路径中，获取的文件扩展名。
     */
    static getFileExtensionNameFromUriPath(uriPath: string | null, isGetLastFileExtensionName?: boolean): string;
}
//# sourceMappingURL=pathUtil.d.ts.map