import { StringRange } from "./model/stringRange.js";
import { NumberStringInfo } from "./model/numberStringInfo.js";
import { NumberRoundType } from "./constant/numberRoundType.js";
export declare class StringUtil {
    static readonly Empty: string;
    /**
     * 判断指定的字符，是否为“数字字符”。
     * @param character 指定的字符。
     * @param [isIncludeDot] 是否包含“小数点”字符，默认为：false。
     * @returns 如果指定的字符为“数字字符”，则返回：true，否则返回：false。
     */
    static isNumberChar(character: string | null, isIncludeDot?: boolean): boolean;
    /**
     * 判断指定的字符，是否为“英文字母字符”。
     * @param character 指定的字符。
     * @returns 如果指定的字符为“英文字母字符”，则返回：true，否则返回：false。
     */
    static isAlphabetChar(character: string | null): boolean;
    /**
     * 判断指定的字符是否相等。
     * @param charA 指定的字符A。
     * @param charB 指定的字符B。
     * @param [isIgnoreCase] 是否忽略大小写，默认为：false。
     * @returns 如果指定的字符相等，则返回：true，否则返回：false。
     */
    static isSameChar(charA: number, charB: number, isIgnoreCase?: boolean): boolean;
    /**
     * 尝试转换字符串为整数数值。
     * @param string 指定的字符串。
     * @param [number] 转换失败时返回的数值，默认为：0。
     * @returns 转换成功时，返回：对应的整数数值，否则返回：0。
     */
    static parseToInt(anyObject: string | null, defaultValue?: number): number;
    /**
     * 尝试转换字符串为浮点数值。
     * @param string 指定的字符串。
     * @param [number] 转换失败时返回的数值，默认为：0.0。
     * @returns 转换成功时，返回：对应的浮点数值，否则返回：0.0。
     */
    static parseToFloat(anyObject: string | null, defaultValue?: number): number;
    /**
     * 获取数字字符串中整数部分的字符个数。
     * @param numberString 指定的数字字符串。
     * @returns 数字字符串中整数部分的字符个数。
     */
    static getIntegerCharsCountOf(numberString: string): number;
    /**
     * 获取数字字符串中小数部分的字符个数。
     * @param numberString 指定的数字字符串。
     * @returns 数字字符串中小数部分的字符个数。
     */
    static getFloatNumberDigitsOf(numberString: string): number;
    /**
     * 获取数字字符串中整数和小数部分的字符串信息。
     * @param numberString 指定的数字字符串。
     * @returns 返回数字字符串中整数和小数部分的字符串信息。
     */
    static getNumberStringInfo(numberString: string | null): NumberStringInfo;
    /**
     * 补充“0”到指定的数字字符串中，直到整数部分的字符个数大于等于指定的整数位数。
     * @param numberString 指定的数字字符串。
     * @param integerNumberDigits 指定的整数部分位数。
     * @returns 返回整数部分补足“0”的数字字符串。
     */
    static complementZeroAtIntegerCharsLeftTo(numberString: string, integerNumberDigits: number): string;
    /**
     * 补充“0”到指定的数字字符串中，直到小数部分的字符个数大于等于指定的小数位数。
     * @param numberString 指定的数字字符串。
     * @param integerNumberDigits 指定的小数部分位数。
     * @returns 返回整数部分补足“0”的数字字符串。
     */
    static complementZeroAtFloatCharsRightTo(numberString: string, floatNumberDigits: number): string;
    /**
     * 将指定的数字字符串转换为指定位数的小数位数的数字字符串。
     * @param numberString 指定的数字字符串。
     * @param floatNumberDigits 指定的小数位数。
     * @returns 返回指定位数的小数位数的数字字符串。
     */
    static stringByFixedFloat(numberObject: string | number | null, floatNumberDigits: number, numberRoundType?: NumberRoundType): string;
    /**
     * 判断指定的字符串，是否为“null”，或“空字符串”。
     * @param str 指定的字符串对象。
     * @returns 如果指定的字符串对象为“null”，或“空字符串”，则返回：true，否则返回：false。
     */
    static isEmpty(str: string | null | undefined): boolean;
    /**
     * 判断指定的字符串，是否不为“null”，或“空字符串”。
     * @param str 指定的字符串对象。
     * @returns 如果指定的字符串对象不为“null”，或“空字符串”，则返回：true，否则返回：false。
     */
    static isNotEmpty(str: string | null | undefined): boolean;
    /**
     * 返回指定字符串，或“Empty”。
     * @param str 指定的字符串对象。
     * @returns 指定的字符串对象不为“null”时返回：指定的字符串，否则返回：StringUtil.Empty。
     */
    static emptyOr(str: string | null): string;
    /**
     * 返回指定字符串的长度。
     * @param str 指定的字符串对象。
     * @returns 指定的字符串对象不为“null”时返回：指定字符串的长度，否则返回：0 。
     */
    static lengthOf(str: string | null): number;
    /**
     * 判断指定的两个字符串，是否完全相同。
     * @param strA 指定的字符串A。
     * @param strB 指定的字符串B。
     * @param [isIgnoreCase] 可选参数，比较时是否忽略大小写，默认为：false。
     * @param [isNullEqualsEmpty] 可选参数，是否判定“null”值等同于“空字符串”，默认为：true。
     * @returns 如果指定的两个字符串相同，则返回：true，否则返回：false。
     */
    static isEquals(strA: string | null, strB: string | null, isIgnoreCase?: boolean, isNullEqualsEmpty?: boolean): boolean;
    static isSameCharsFromIndexIn(stringA: string | null, stringACompareBeginCharIndex: number, stringB: string | null, stringBCompareBeginCharIndex: number, compareCharsCount: number, isIgnoreCase?: boolean, isNullEqualsEmpty?: boolean): boolean;
    /**
     * 获取指定关键字，在指定的字符串中，第一次出现的索引值。
     * @param str 指定的字符串。
     * @param keyword 要查找的关键字。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @param [firstCharIndexToSearch] 可选参数，指定查找范围的第一个字符索引值，默认为：0。
     * @param [lastCharIndexToSearch] 可选参数，指定查找范围的最后一个字符索引值，默认为：-1，表示不限制。
     * @returns 查找到指定的关键字时，返回关键字在指定字符串中的第一次出现的索引值，如果查找不到指定的关键字，则返回：-1。
     */
    static indexOfKeywordIn(str: string | null, keyword: string | null, isIgnoreCase?: boolean, firstCharIndexToSearch?: number, lastCharIndexToSearch?: number): number;
    /**
     * 获取指定关键字，在指定的字符串中，最后一次出现的索引值。
     * @param str 指定的字符串。
     * @param keyword 要查找的关键字。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @param [firstCharIndexToSearch] 可选参数，指定查找范围的第一个字符索引值，默认为：0。
     * @returns 查找到指定的关键字时，返回关键字在指定字符串中的最后一次出现的索引值，如果查找不到指定的关键字，则返回：-1。
     */
    static lastIndexOfKeywordIn(str: string | null, keyword: string | null, isIgnoreCase?: boolean, firstCharIndexToSearch?: number, lastCharIndexToSearch?: number): number;
    /**
     * 是否指定的字符串是以指定的关键字开头。
     * @param str 指定的字符串。
     * @param keyword 指定的关键字。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @returns 当指定的字符串是以指定的关键字开头开头时，返回：true，否则返回：false。
     */
    static isBeginWithKeywordIn(str: string | null, keyword: string | null, isIgnoreCase?: boolean): boolean;
    /**
     * 是否指定的字符串是以指定的关键字结尾。
     * @param str 指定的字符串。
     * @param keyword 指定的关键字。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @returns 当指定的字符串是以指定的关键字结尾时，返回：true，否则返回：false。
     */
    static isEndWithKeywordIn(str: string | null, keyword: string | null, isIgnoreCase?: boolean): boolean;
    /**
     * 是否指定的字符串包含指定的关键字。
     * @param str 指定的字符串。
     * @param keyword 指定的关键字。
     * @param [isIgnoreCase] 查找时是否忽略大小写，默认为： false 。
     * @returns 当指定的字符串包含指定的关键字时，返回：true，否则返回：false。
     */
    static isContainsKeywordIn(str: string | null, keyword: string | null, isIgnoreCase?: boolean): boolean;
    /**
     * 获取指定字符串的左边指定长度的子字符串。
     * @param str 指定的字符串。
     * @param leftLength 指定长度。
     * @returns 返回指定字符串的左边指定长度的子字符串。
     */
    static left(str: string | null, leftLength: number): string;
    /**
     * 获取指定字符串的右边指定长度的子字符串。
     * @param str 指定的字符串。
     * @param rightLength 指定长度。
     * @returns 返回指定字符串的右边指定长度的子字符串。
     */
    static right(str: string | null, rightLength: number): string;
    /**
     * 移除指定字符串左边的关键字。
     * @param str 指定的字符串。
     * @param keywordsNeedTrimed 需要被移除的关键字数组。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @returns 返回移除指定字符串左边的关键字后的字符串。
     */
    static trimLeftKeywordsIn(str: string | null, keywordsNeedTrimed: Array<string>, isIgnoreCase?: boolean): string;
    /**
     * 移除指定字符串左边的关键字。
     * @param str 指定的字符串。
     * @param keywordsNeedTrimed 需要被移除的关键字。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @returns 返回移除指定字符串左边的关键字后的字符串。
     */
    static trimLeftKeywordIn(str: string | null, keywordNeedTrimed: string | null, isIgnoreCase?: boolean): string;
    /**
     * 移除指定字符串右边的关键字。
     * @param str 指定的字符串。
     * @param keywordsNeedTrimed 需要被移除的关键字数组。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @returns 返回移除指定字符串右边的关键字后的字符串。
     */
    static trimRightKeywordsIn(str: string | null, keywordsNeedTrimed: Array<string>, isIgnoreCase?: boolean): string;
    /**
     * 移除指定字符串右边的关键字。
     * @param str 指定的字符串。
     * @param keywordsNeedTrimed 需要被移除的关键字。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @returns 返回移除指定字符串右边的关键字后的字符串。
     */
    static trimRightKeywordIn(str: string | null, keywordNeedTrimed: string, isIgnoreCase?: boolean): string;
    /**
     * 获取指定关键字，在指定字符串中出现的全部区域信息数组。
     * @param str 指定的字符串。
     * @param keyword 指定关键字。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @param [firstCharIndexToSearch] 可选参数，指定查找范围的第一个字符索引值，默认为：0。
     * @returns 返回指定关键字，在指定字符串中出现的全部区域信息数组。
     */
    static getRangesOfKeywordIn(str: string | null, keyword: string | null, isIgnoreCase?: boolean, firstCharIndexToSearch?: number): Array<StringRange>;
    /**
     * 在字符串中，使用指定的字符串替换指定的关键字。
     * @param str 要进行替换操作的字符串。
     * @param substringRanges 指定要替换字符串的区域信息数组。
     * @param newSubstringsSpecified 指定要使用的新字符串数组。
     * @param [isUseLastNewSubstringsSpecifiedAsDefault] 是否使用最后一个新字符串作为默认新字符串使用，为“true”时，当指定的字符串区域没有对应的新字符串时，将尝试使用最后一个新字符串进行替换。
     * @returns 使用指定的字符串替换指定的关键字后的字符串。
     */
    static replaceKeywordsInRangesWithStringsSpecifiedIn(str: string | null, substringRanges: StringRange[] | null, newSubstringsSpecified: string[] | null, isUseLastNewSubstringsSpecifiedToRange?: boolean): string | null;
    /**
     * 在指定的字符串中替换指定的关键字为指定的新字符串。
     * @param str 指定的字符串。
     * @param keyword 要替换的关键字。
     * @param newValue 要替代关键字的新字符串。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @returns 返回替换成功的关键字数量。
     */
    static replaceAllKeywordIn(str: string | null, keyword: string | null, newValue: string | null, isIgnoreCase?: boolean): string | null;
    /**
     * 在指定的字符串中替换指定的关键字为指定的新字符串。
     * @param str 指定的字符串。
     * @param keywordArray 要替换的关键字数组。
     * @param newValue 要替代关键字的新字符串。
     * @param [isIgnoreCase] 可选参数，查找时是否忽略大小写，默认为：false。
     * @returns 返回替换成功的关键字数量。
     */
    static replaceAllKeywordInArrayIn(str: string | null, keywordArray: string[] | null, newValue: string | null, isIgnoreCase?: boolean): string | null;
    /**
     * 根据指定的格式化字符串，格式化指定的值。
     * @param formatter 指定的字符串格式，支持格式有：
     * %%，百分号；
     * “%x1.x2d”，“%x1.x2i”或“%x1.x2f”，
     * 其中x1表示要展示的整数位数，“0”或“不指定”表示不需要限制位数，不足时左侧补“0”，
     * x2表示要展示的浮点数位数，“0”或“不指定”表示不需要限制位数，不足时右侧补“0”。
     * @param values 要进行格式化的值。
     * @returns format 格式化后的字符串。
     */
    static format(formatter: string | null, ...values: any[]): string;
    /**
     * 使用指定的分隔符连接指定的字符串数组。
     * @param delimiter 指定的连接分隔符。
     * @param isDelimiterConsecutiveDisable 是否允许连续的分隔符，在“连接处”出现。
     * @param strings 要进行连接的字符串数组。
     * @returns 使用指定的分隔符连接指定字符串数组后，生成的最终字符串。
     */
    static joinStringsWithDelimiter(delimiter: string | null, isDelimiterConsecutiveDisable: boolean, ...strings: string[]): string;
}
//# sourceMappingURL=stringUtil.d.ts.map