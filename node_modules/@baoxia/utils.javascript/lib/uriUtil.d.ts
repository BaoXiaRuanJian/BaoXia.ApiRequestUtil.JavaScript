import { Uri } from "./model/uri.js";
import { UriQueryAndFragment } from "./model/uriQueryAndFragment.js";
export declare class UriUtil {
    /**
     * 解析Uri字符串。
     * @param uriString 指定的Uri字符串。
     * @returns uri 解析成功时，返回Uri对象，否则返回：null。
     */
    static parseUri(uriString: string): Uri | null;
    /**
     * 获取指定Uri字符串中的查询参数和锚点部分。
     * @param uriString 指定的Uri字符串。
     * @param isIncludeDelimiter 返回的查询参数和锚点部分是否包含与路径的分隔符。
     * @returns 指定Uri字符串中的查询参数和锚点部分。
     */
    static getUriQueryAndFragmentFrom(uriString: string | null, isIncludeDelimiter?: boolean): UriQueryAndFragment | null;
    /**
     * 将指定的路径追加到指定的Uri字符串中。
     * @param uriString 指定的Uri字符串。
     * @param pathNeedAppend 要追加的路径。
     * @returns 返回追加后的Uri字符串。
     */
    static appendPathToUri(uriString: string | null, pathNeedAppend: string | null): string;
    /**
     * 根据指定的Uri字符串和查询参数Map对象，创建查询参数字符串。
     * @param queryParams 查询参数Map对象。
     * @returns 返回查询参数字符串。
     */
    static createQueryParamsStringWithMap(queryParams: Map<string, string> | null): string;
    /**
     * 将指定的查询参数追加到指定的Uri字符串中。
     * @param uriString 指定的Uri字符串。
     * @param queryParams 要追加的查询参数。
     * @returns 返回追加后的Uri字符串。
     */
    static appendQueryParamsToUri(uriString: string | null, queryParams: string | Map<string, string> | null): string;
    /**
     * 将指定的锚点参数追加到指定的Uri字符串中。
     * @param uriString 指定的Uri字符串。
     * @param fragmentParams 要追加的锚点参数。
     * @returns 返回追加后的Uri字符串。
     */
    static appendFragmentParamsToUri(uriString: string | null, fragmentParams: string | Map<string, string> | null): string;
}
//# sourceMappingURL=uriUtil.d.ts.map